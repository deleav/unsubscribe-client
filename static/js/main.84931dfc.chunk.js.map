{"version":3,"sources":["modules/common/HyperLink.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["HyperLink","children","href","target","rel","columns","title","dataIndex","render","value","App","useState","openModal","setOpenModal","dataSource","setDataSource","targetSites","setTargetSites","document","addEventListener","e","console","log","detail","data","length","Main","id","FloatingFooter","PlusButton","onClick","visible","footer","onCancel","map","site","url","Option","name","styled","div","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"8QAMe,SAASA,EAAT,GAGe,IAF5BC,EAE2B,EAF3BA,SACAC,EAC2B,EAD3BA,KAEA,OACE,mBAAGA,KAAMA,EAAMC,OAAO,SAASC,IAAI,aAAnC,SACGH,ICCP,IAAMI,EAAiC,CACrC,CACEC,MAAO,eACPC,UAAW,QAEb,CACED,MAAO,eACPC,UAAW,gBAEb,CACED,MAAO,yBACPC,UAAW,OACXC,OAHF,SAGSC,GACL,OAAO,cAACT,EAAD,CAAWE,KAAMO,EAAjB,2BAmDEC,MA9Cf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEuBF,mBAAqB,IAF5C,mBAENG,EAFM,KAEMC,EAFN,OAGyBJ,mBAAuB,IAHhD,mBAGNK,EAHM,KAGOC,EAHP,KAsBb,OAjBAC,SAASC,iBACP,yBACA,SACEC,GAMA,GAFAC,QAAQC,IAAIF,EAAEG,QAEVH,EAAEG,OAAQ,CAAC,IAAD,IACNA,EAASH,EAAEG,QACjB,UAAIA,EAAOC,YAAX,aAAI,EAAaC,SAAQV,EAAcQ,EAAOC,OAC9C,UAAID,EAAOP,mBAAX,aAAI,EAAoBS,SAAQR,EAAeM,EAAOP,iBAM1D,eAACU,EAAD,WACE,sBAAKC,GAAG,eAAR,UACE,mDACA,cAAC,IAAD,CAAOb,WAAYA,EAAYT,QAASA,OAE1C,cAACuB,EAAD,UACE,cAACC,EAAD,CAAYC,QAAS,kBAAMjB,GAAa,QAE1C,cAAC,IAAD,CACEkB,QAASnB,EACToB,OAAQ,KACRC,SAAU,kBAAMpB,GAAa,IAH/B,SAKGG,EAAYkB,KAAI,SAACC,GAAD,OACf,cAACnC,EAAD,CAAWE,KAAMiC,EAAKC,IAAtB,SACE,cAACC,EAAD,UAASF,EAAKG,kBAUpBZ,EAAOa,IAAOC,IAAV,8CAGJZ,EAAiBW,IAAOC,IAAV,8EAKdX,EAAaU,IAAOC,IAAV,ylBA+BVH,EAASE,IAAOC,IAAV,2LCxGGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS1C,OACP,cAAC,IAAM2C,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASkC,eAAe,SAM1BX,M","file":"static/js/main.84931dfc.chunk.js","sourcesContent":["import { PropsWithChildren } from \"react\";\n\ntype Props = {\n  href: string;\n};\n\nexport default function HyperLink({\n  children,\n  href,\n}: PropsWithChildren<Props>) {\n  return (\n    <a href={href} target=\"_blank\" rel=\"noreferrer\">\n      {children}\n    </a>\n  );\n}\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"antd/dist/antd.css\";\nimport { Modal, Table } from \"antd\";\nimport { ListItem } from \"./modules/List/types\";\nimport { ColumnsType } from \"antd/lib/table\";\nimport HyperLink from \"./modules/common/HyperLink\";\n\ninterface TargetSite {\n  name: string;\n  url: string;\n}\n\nconst columns: ColumnsType<ListItem> = [\n  {\n    title: \"Service Name\",\n    dataIndex: \"name\",\n  },\n  {\n    title: \"Expired Date\",\n    dataIndex: \"rechargeDate\",\n  },\n  {\n    title: \"Subscription Info Page\",\n    dataIndex: \"link\",\n    render(value) {\n      return <HyperLink href={value}>Go to page</HyperLink>;\n    },\n  },\n];\n\nfunction App() {\n  const [openModal, setOpenModal] = useState(false);\n  const [dataSource, setDataSource] = useState<ListItem[]>([]);\n  const [targetSites, setTargetSites] = useState<TargetSite[]>([]);\n\n  document.addEventListener(\n    \"filldatafromextension\",\n    function (\n      e: Event & {\n        readonly detail?: { data?: ListItem[]; targetSites?: TargetSite[] };\n      }\n    ) {\n      console.log(e.detail);\n\n      if (e.detail) {\n        const detail = e.detail;\n        if (detail.data?.length) setDataSource(detail.data);\n        if (detail.targetSites?.length) setTargetSites(detail.targetSites);\n      }\n    }\n  );\n\n  return (\n    <Main>\n      <div id=\"main-content\">\n        <h1>Subscription info</h1>\n        <Table dataSource={dataSource} columns={columns} />\n      </div>\n      <FloatingFooter>\n        <PlusButton onClick={() => setOpenModal(true)} />\n      </FloatingFooter>\n      <Modal\n        visible={openModal}\n        footer={null}\n        onCancel={() => setOpenModal(false)}\n      >\n        {targetSites.map((site) => (\n          <HyperLink href={site.url}>\n            <Option>{site.name}</Option>\n          </HyperLink>\n        ))}\n      </Modal>\n    </Main>\n  );\n}\n\nexport default App;\n\nconst Main = styled.div`\n  padding: 40px;\n`;\nconst FloatingFooter = styled.div`\n  position: fixed;\n  bottom: 0;\n  width: 100%;\n`;\nconst PlusButton = styled.div`\n  position: relative;\n  border-radius: 50%;\n  background-color: #b7bcba;\n  margin: 0 50px 50px auto;\n  width: 56px;\n  height: 56px;\n  cursor: pointer;\n\n  &::before {\n    position: absolute;\n    content: \"\";\n    width: 20px;\n    height: 3px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    background-color: white;\n  }\n\n  &::after {\n    position: absolute;\n    content: \"\";\n    width: 20px;\n    height: 3px;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%) rotate(90deg);\n    background-color: white;\n  }\n`;\nconst Option = styled.div`\n  display: block;\n  padding: 16px;\n  width: 80%;\n  text-decoration: none;\n  color: black;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.15);\n  }\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}